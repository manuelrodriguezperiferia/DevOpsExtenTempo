"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = __importDefault(require("chai"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const lib_1 = require("../lib");
const REPO_ROOT = path_1.default.join(__dirname, "..", "..", "..", "..");
const BENCHES_INPUT_DIR = path_1.default.join(REPO_ROOT, "benches");
const BENCHES_DIR = path_1.default.join(REPO_ROOT, "test-data", "merge", "benches");
const RANGES_DIR = path_1.default.join(REPO_ROOT, "test-data", "merge", "ranges");
const BENCHES_TIMEOUT = 20000; // 20sec
const FIXTURES_DIR = path_1.default.join(REPO_ROOT, "test-data", "bugs");
function loadFixture(name) {
    const content = fs_1.default.readFileSync(path_1.default.resolve(FIXTURES_DIR, `${name}.json`), { encoding: "UTF-8" });
    return JSON.parse(content);
}
describe("merge", () => {
    describe("Various", () => {
        it("accepts empty arrays for `mergeProcessCovs`", () => {
            const inputs = [];
            const expected = { result: [] };
            const actual = (0, lib_1.mergeProcessCovs)(inputs);
            chai_1.default.assert.deepEqual(actual, expected);
        });
        it("accepts empty arrays for `mergeScriptCovs`", () => {
            const inputs = [];
            const expected = undefined;
            const actual = (0, lib_1.mergeScriptCovs)(inputs);
            chai_1.default.assert.deepEqual(actual, expected);
        });
        it("accepts empty arrays for `mergeFunctionCovs`", () => {
            const inputs = [];
            const expected = undefined;
            const actual = (0, lib_1.mergeFunctionCovs)(inputs);
            chai_1.default.assert.deepEqual(actual, expected);
        });
        it("accepts arrays with a single item for `mergeProcessCovs`", () => {
            const inputs = [
                {
                    result: [
                        {
                            scriptId: "123",
                            url: "/lib.js",
                            functions: [
                                {
                                    functionName: "test",
                                    isBlockCoverage: true,
                                    ranges: [
                                        { startOffset: 0, endOffset: 4, count: 2 },
                                        { startOffset: 1, endOffset: 2, count: 1 },
                                        { startOffset: 2, endOffset: 3, count: 1 },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ];
            const expected = {
                result: [
                    {
                        scriptId: "0",
                        url: "/lib.js",
                        functions: [
                            {
                                functionName: "test",
                                isBlockCoverage: true,
                                ranges: [
                                    { startOffset: 0, endOffset: 4, count: 2 },
                                    { startOffset: 1, endOffset: 3, count: 1 },
                                ],
                            },
                        ],
                    },
                ],
            };
            const actual = (0, lib_1.mergeProcessCovs)(inputs);
            chai_1.default.assert.deepEqual(actual, expected);
        });
        describe("mergeProcessCovs", () => {
            // see: https://github.com/demurgos/v8-coverage/issues/2
            it("handles function coverage merged into block coverage", () => {
                const blockCoverage = loadFixture("issue-2-block-coverage");
                const functionCoverage = loadFixture("issue-2-func-coverage");
                const inputs = [
                    functionCoverage,
                    blockCoverage,
                ];
                const expected = loadFixture("issue-2-expected");
                const actual = (0, lib_1.mergeProcessCovs)(inputs);
                chai_1.default.assert.deepEqual(actual, expected);
            });
            // see: https://github.com/demurgos/v8-coverage/issues/2
            it("handles block coverage merged into function coverage", () => {
                const blockCoverage = loadFixture("issue-2-block-coverage");
                const functionCoverage = loadFixture("issue-2-func-coverage");
                const inputs = [
                    blockCoverage,
                    functionCoverage,
                ];
                const expected = loadFixture("issue-2-expected");
                const actual = (0, lib_1.mergeProcessCovs)(inputs);
                chai_1.default.assert.deepEqual(actual, expected);
            });
        });
        it("accepts arrays with a single item for `mergeScriptCovs`", () => {
            const inputs = [
                {
                    scriptId: "123",
                    url: "/lib.js",
                    functions: [
                        {
                            functionName: "test",
                            isBlockCoverage: true,
                            ranges: [
                                { startOffset: 0, endOffset: 4, count: 2 },
                                { startOffset: 1, endOffset: 2, count: 1 },
                                { startOffset: 2, endOffset: 3, count: 1 },
                            ],
                        },
                    ],
                },
            ];
            const expected = {
                scriptId: "123",
                url: "/lib.js",
                functions: [
                    {
                        functionName: "test",
                        isBlockCoverage: true,
                        ranges: [
                            { startOffset: 0, endOffset: 4, count: 2 },
                            { startOffset: 1, endOffset: 3, count: 1 },
                        ],
                    },
                ],
            };
            const actual = (0, lib_1.mergeScriptCovs)(inputs);
            chai_1.default.assert.deepEqual(actual, expected);
        });
        it("accepts arrays with a single item for `mergeFunctionCovs`", () => {
            const inputs = [
                {
                    functionName: "test",
                    isBlockCoverage: true,
                    ranges: [
                        { startOffset: 0, endOffset: 4, count: 2 },
                        { startOffset: 1, endOffset: 2, count: 1 },
                        { startOffset: 2, endOffset: 3, count: 1 },
                    ],
                },
            ];
            const expected = {
                functionName: "test",
                isBlockCoverage: true,
                ranges: [
                    { startOffset: 0, endOffset: 4, count: 2 },
                    { startOffset: 1, endOffset: 3, count: 1 },
                ],
            };
            const actual = (0, lib_1.mergeFunctionCovs)(inputs);
            chai_1.default.assert.deepEqual(actual, expected);
        });
    });
    describe("ranges", () => {
        for (const sourceFile of getSourceFiles()) {
            const relPath = path_1.default.relative(RANGES_DIR, sourceFile);
            describe(relPath, () => {
                const content = fs_1.default.readFileSync(sourceFile, { encoding: "UTF-8" });
                const items = JSON.parse(content);
                for (const item of items) {
                    const test = () => {
                        const actual = (0, lib_1.mergeProcessCovs)(item.inputs);
                        chai_1.default.assert.deepEqual(actual, item.expected);
                    };
                    switch (item.status) {
                        case "run":
                            it(item.name, test);
                            break;
                        case "only":
                            it.only(item.name, test);
                            break;
                        case "skip":
                            it.skip(item.name, test);
                            break;
                        default:
                            throw new Error(`Unexpected status: ${item.status}`);
                    }
                }
            });
        }
    });
    describe("benches", () => {
        for (const bench of getBenches()) {
            const BENCHES_TO_SKIP = new Set();
            if (process.env.CI === "true") {
                // Skip very large benchmarks when running continuous integration
                BENCHES_TO_SKIP.add("node@10.11.0");
                BENCHES_TO_SKIP.add("npm@6.4.1");
            }
            const name = path_1.default.basename(bench);
            if (BENCHES_TO_SKIP.has(name)) {
                it.skip(`${name} (skipped: too large for CI)`, testBench);
            }
            else {
                it(name, testBench);
            }
            async function testBench() {
                this.timeout(BENCHES_TIMEOUT);
                const inputFileNames = await fs_1.default.promises.readdir(bench);
                const inputPromises = [];
                for (const inputFileName of inputFileNames) {
                    const resolved = path_1.default.join(bench, inputFileName);
                    inputPromises.push(fs_1.default.promises.readFile(resolved).then(buffer => JSON.parse(buffer.toString("UTF-8"))));
                }
                const inputs = await Promise.all(inputPromises);
                const expectedPath = path_1.default.join(BENCHES_DIR, `${name}.json`);
                const expectedContent = await fs_1.default.promises.readFile(expectedPath, { encoding: "UTF-8" });
                const expected = JSON.parse(expectedContent);
                const startTime = Date.now();
                const actual = (0, lib_1.mergeProcessCovs)(inputs);
                const endTime = Date.now();
                console.error(`Time (${name}): ${(endTime - startTime) / 1000}`);
                chai_1.default.assert.deepEqual(actual, expected);
                console.error(`OK: ${name}`);
            }
        }
    });
});
function getSourceFiles() {
    return getSourcesFrom(RANGES_DIR);
    function* getSourcesFrom(dir) {
        const names = fs_1.default.readdirSync(dir);
        for (const name of names) {
            const resolved = path_1.default.join(dir, name);
            const stat = fs_1.default.statSync(resolved);
            if (stat.isDirectory()) {
                yield* getSourcesFrom(dir);
            }
            else {
                yield resolved;
            }
        }
    }
}
function* getBenches() {
    const names = fs_1.default.readdirSync(BENCHES_INPUT_DIR);
    for (const name of names) {
        const resolved = path_1.default.join(BENCHES_INPUT_DIR, name);
        const stat = fs_1.default.statSync(resolved);
        if (stat.isDirectory()) {
            yield resolved;
        }
    }
}
//# sourceMappingURL=merge.spec.js.map