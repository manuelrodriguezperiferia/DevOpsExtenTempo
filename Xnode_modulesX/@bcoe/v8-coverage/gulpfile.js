"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buildTools = __importStar(require("turbo-gulp"));
const lib_1 = require("turbo-gulp/targets/lib");
const mocha_1 = require("turbo-gulp/targets/mocha");
const gulp_1 = __importDefault(require("gulp"));
const minimist_1 = __importDefault(require("minimist"));
const options = (0, minimist_1.default)(process.argv.slice(2), {
    string: ["devDist"],
    default: { devDist: undefined },
    alias: { devDist: "dev-dist" },
});
const project = {
    root: __dirname,
    packageJson: "package.json",
    buildDir: "build",
    distDir: "dist",
    srcDir: "src",
    typescript: {}
};
const lib = {
    project,
    name: "lib",
    srcDir: "src/lib",
    scripts: ["**/*.ts"],
    mainModule: "index",
    dist: {
        packageJsonMap: (old) => {
            const version = options.devDist !== undefined ? `${old.version}-build.${options.devDist}` : old.version;
            return { ...old, version, scripts: undefined, private: false };
        },
        npmPublish: {
            tag: options.devDist !== undefined ? "next" : "latest",
        },
    },
    tscOptions: {
        declaration: true,
        skipLibCheck: true,
    },
    typedoc: {
        dir: "typedoc",
        name: "Helpers for V8 coverage files",
        deploy: {
            repository: "git@github.com:demurgos/v8-coverage.git",
            branch: "gh-pages",
        },
    },
    copy: [
        {
            files: ["**/*.json"],
        },
    ],
    clean: {
        dirs: ["build/lib", "dist/lib"],
    },
};
const test = {
    project,
    name: "test",
    srcDir: "src",
    scripts: ["test/**/*.ts", "lib/**/*.ts", "e2e/*/*.ts"],
    customTypingsDir: "src/custom-typings",
    tscOptions: {
        allowSyntheticDefaultImports: true,
        esModuleInterop: true,
        skipLibCheck: true,
    },
    // generateTestMain: true,
    copy: [
        {
            src: "e2e",
            // <project-name>/(project|test-resources)/<any>
            files: ["*/project/**/*", "*/test-resources/**/*"],
            dest: "e2e",
        },
    ],
    clean: {
        dirs: ["build/test"],
    },
};
const libTasks = (0, lib_1.registerLibTasks)(gulp_1.default, lib);
(0, mocha_1.registerMochaTasks)(gulp_1.default, test);
buildTools.projectTasks.registerAll(gulp_1.default, project);
gulp_1.default.task("all:tsconfig.json", gulp_1.default.parallel("lib:tsconfig.json", "test:tsconfig.json"));
gulp_1.default.task("dist", libTasks.dist);
gulp_1.default.task("default", libTasks.dist);
//# sourceMappingURL=gulpfile.js.map