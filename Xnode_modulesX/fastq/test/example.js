"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fastq = __importStar(require("../"));
const __1 = require("../");
// Basic example
const queue = fastq(worker, 1);
queue.push('world', (err, result) => {
    if (err)
        throw err;
    console.log('the result is', result);
});
queue.push('push without cb');
queue.concurrency;
queue.drain();
queue.empty = () => undefined;
console.log('the queue tasks are', queue.getQueue());
queue.idle();
queue.kill();
queue.killAndDrain();
queue.length;
queue.pause();
queue.resume();
queue.running();
queue.saturated = () => undefined;
queue.unshift('world', (err, result) => {
    if (err)
        throw err;
    console.log('the result is', result);
});
queue.unshift('unshift without cb');
function worker(task, cb) {
    cb(null, 'hello ' + task);
}
const genericsQueue = fastq({ base: 6 }, genericsWorker, 1);
genericsQueue.push(7, (err, done) => {
    if (err)
        throw err;
    console.log('the result is', done);
});
genericsQueue.unshift(7, (err, done) => {
    if (err)
        throw err;
    console.log('the result is', done);
});
function genericsWorker(task, cb) {
    cb(null, 'the meaning of life is ' + (this.base * task));
}
const queue2 = (0, __1.promise)(asyncWorker, 1);
async function asyncWorker(task) {
    return 'hello ' + task;
}
async function run() {
    await queue.push(42);
    await queue.unshift(42);
}
run();
//# sourceMappingURL=example.js.map